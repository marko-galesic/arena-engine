/* stb_easy_font.h - v0.7 - bitmap font for 3D rendering - public domain
   by Sean Barrett - http://nothings.org/stb/stb_easy_font.h
   Creates a texture with ASCII characters, samples it with nearest neighbor.
   Has a built-in font and can also use .fnt files.
   
   DOCUMENTATION
   
   int  stb_easy_font_print(float x, float y, char *text, unsigned char color[4], void *vertex_buffer, int vbuf_size);
   
   This function renders text to a vertex buffer. It returns the number of vertices
   generated. The vertex format is:
   
      float x, y, z;    // position
      float s, t;       // texture coordinate
      unsigned char r,g,b,a; // color
   
   You can ignore the z coordinate and s,t coordinates if you don't need them.
   
   The color is passed as an array of 4 unsigned chars in r,g,b,a order.
   
   To generate a texture from the font, call this function with a large vertex
   buffer and then create a texture from the generated vertices. The texture
   should be white-on-transparent, with alpha set to 255. Then you can
   sample from the texture and multiply by the color you want.
   
   The function will generate a quad for each character. The quads are
   generated in order, so you can render them as a triangle strip.
   
   If you pass NULL for the color parameter, it will use white.
   
   The function will clip text that goes outside the specified bounds.
   
   LIMITATIONS
   
   - The font is monospaced
   - The texture is 8x8 pixels per character
   - The texture is white-on-transparent
   - The texture is not antialiased
   - The texture is not compressed
   
   EXAMPLE
   
   // Create a texture from the font
   float vertices[1000];
   int num_vertices = stb_easy_font_print(0, 0, "Hello, World!", NULL, vertices, 1000);
   
   // Create a texture from the vertices
   // (you'll need to implement this part)
   
   // Render the text
   glEnable(GL_TEXTURE_2D);
   glBindTexture(GL_TEXTURE_2D, texture);
   glBegin(GL_QUADS);
   for (int i = 0; i < num_vertices; i += 4) {
       glTexCoord2f(vertices[i*5 + 3], vertices[i*5 + 4]);
       glVertex3f(vertices[i*5 + 0], vertices[i*5 + 1], vertices[i*5 + 2]);
   }
   glEnd();
   
   LICENSE
   
   This software is in the public domain. Where that dedication is not
   recognized, you are granted a perpetual, irrevocable license to copy,
   modify, propagate, and distribute this file as you see fit.
*/

#ifndef STB_EASY_FONT_H
#define STB_EASY_FONT_H

#ifdef __cplusplus
extern "C" {
#endif

typedef struct
{
   unsigned char c0,c1; // start/end characters
   unsigned char w;      // width
   unsigned char h;      // height
   unsigned char data[8]; // font data
} stb_easy_font_char;

extern stb_easy_font_char stb_easy_font_charinfo[95];

int stb_easy_font_print(float x, float y, char *text, unsigned char color[4], void *vertex_buffer, int vbuf_size);

#ifdef __cplusplus
}
#endif

#endif

#ifdef STB_EASY_FONT_IMPLEMENTATION

stb_easy_font_char stb_easy_font_charinfo[95] = {
   {32,126,8,8,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},   // space
   {33,33,8,8,{0x18,0x18,0x18,0x18,0x18,0x00,0x18,0x18}},   // !
   {34,34,8,8,{0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00}},   // "
   {35,35,8,8,{0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00}},   // #
   {36,36,8,8,{0x18,0x18,0x7C,0xC0,0x78,0x0C,0xF8,0x18}},   // $
   {37,37,8,8,{0x00,0x00,0xC6,0xCC,0x18,0x30,0x66,0xC6}},   // %
   {38,38,8,8,{0x38,0x6C,0x38,0x60,0xC6,0xC6,0x7C,0x00}},   // &
   {39,39,8,8,{0x18,0x18,0x30,0x00,0x00,0x00,0x00,0x00}},   // '
   {40,40,8,8,{0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00}},   // (
   {41,41,8,8,{0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00}},   // )
   {42,42,8,8,{0x00,0x00,0x18,0x18,0x7E,0x18,0x18,0x00}},   // *
   {43,43,8,8,{0x00,0x00,0x18,0x18,0x7E,0x18,0x18,0x00}},   // +
   {44,44,8,8,{0x00,0x00,0x00,0x00,0x18,0x18,0x30,0x00}},   // ,
   {45,45,8,8,{0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00}},   // -
   {46,46,8,8,{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00}},   // .
   {47,47,8,8,{0x00,0x00,0x06,0x0C,0x18,0x30,0x60,0x00}},   // /
   {48,48,8,8,{0x7C,0xC6,0xC6,0xD6,0xD6,0xC6,0x7C,0x00}},   // 0
   {49,49,8,8,{0x18,0x38,0x78,0x18,0x18,0x18,0x7E,0x00}},   // 1
   {50,50,8,8,{0x7C,0xC6,0x06,0x0C,0x18,0x30,0xFE,0x00}},   // 2
   {51,51,8,8,{0x7C,0xC6,0x06,0x3C,0x06,0xC6,0x7C,0x00}},   // 3
   {52,52,8,8,{0x0C,0x1C,0x3C,0x6C,0xFE,0x0C,0x0C,0x00}},   // 4
   {53,53,8,8,{0xFE,0xC0,0xC0,0xFC,0x06,0xC6,0x7C,0x00}},   // 5
   {54,54,8,8,{0x7C,0xC6,0xC0,0xFC,0xC6,0xC6,0x7C,0x00}},   // 6
   {55,55,8,8,{0xFE,0x06,0x0C,0x18,0x30,0x30,0x30,0x00}},   // 7
   {56,56,8,8,{0x7C,0xC6,0xC6,0x7C,0xC6,0xC6,0x7C,0x00}},   // 8
   {57,57,8,8,{0x7C,0xC6,0xC6,0x7E,0x06,0xC6,0x7C,0x00}},   // 9
   {58,58,8,8,{0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x00}},   // :
   {59,59,8,8,{0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x30}},   // ;
   {60,60,8,8,{0x00,0x00,0x0C,0x18,0x30,0x18,0x0C,0x00}},   // <
   {61,61,8,8,{0x00,0x00,0x00,0x7E,0x00,0x7E,0x00,0x00}},   // =
   {62,62,8,8,{0x00,0x00,0x30,0x18,0x0C,0x18,0x30,0x00}},   // >
   {63,63,8,8,{0x7C,0xC6,0x0C,0x18,0x18,0x00,0x18,0x18}},   // ?
   {64,64,8,8,{0x7C,0xC6,0xC6,0xDE,0xDE,0xC0,0x7C,0x00}},   // @
   {65,65,8,8,{0x7C,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0x00}},   // A
   {66,66,8,8,{0xFC,0xC6,0xC6,0xFC,0xC6,0xC6,0xFC,0x00}},   // B
   {67,67,8,8,{0x7C,0xC6,0xC0,0xC0,0xC0,0xC6,0x7C,0x00}},   // C
   {68,68,8,8,{0xFC,0xC6,0xC6,0xC6,0xC6,0xC6,0xFC,0x00}},   // D
   {69,69,8,8,{0xFE,0xC0,0xC0,0xFC,0xC0,0xC0,0xFE,0x00}},   // E
   {70,70,8,8,{0xFE,0xC0,0xC0,0xFC,0xC0,0xC0,0xC0,0x00}},   // F
   {71,71,8,8,{0x7C,0xC6,0xC0,0xDE,0xC6,0xC6,0x7C,0x00}},   // G
   {72,72,8,8,{0xC6,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0x00}},   // H
   {73,73,8,8,{0x7E,0x18,0x18,0x18,0x18,0x18,0x7E,0x00}},   // I
   {74,74,8,8,{0x06,0x06,0x06,0x06,0xC6,0xC6,0x7C,0x00}},   // J
   {75,75,8,8,{0xC6,0xCC,0xD8,0xF0,0xD8,0xCC,0xC6,0x00}},   // K
   {76,76,8,8,{0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xFE,0x00}},   // L
   {77,77,8,8,{0xC6,0xEE,0xFE,0xD6,0xC6,0xC6,0xC6,0x00}},   // M
   {78,78,8,8,{0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6,0x00}},   // N
   {79,79,8,8,{0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00}},   // O
   {80,80,8,8,{0xFC,0xC6,0xC6,0xFC,0xC0,0xC0,0xC0,0x00}},   // P
   {81,81,8,8,{0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x06}},   // Q
   {82,82,8,8,{0xFC,0xC6,0xC6,0xFC,0xC6,0xC6,0xC6,0x00}},   // R
   {83,83,8,8,{0x7C,0xC6,0xC0,0x7C,0x06,0xC6,0x7C,0x00}},   // S
   {84,84,8,8,{0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x00}},   // T
   {85,85,8,8,{0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00}},   // U
   {86,86,8,8,{0xC6,0xC6,0xC6,0xC6,0xC6,0x6C,0x38,0x00}},   // V
   {87,87,8,8,{0xC6,0xC6,0xC6,0xD6,0xFE,0xEE,0xC6,0x00}},   // W
   {88,88,8,8,{0xC6,0xC6,0x6C,0x38,0x6C,0xC6,0xC6,0x00}},   // X
   {89,89,8,8,{0xC6,0xC6,0xC6,0x7C,0x18,0x18,0x18,0x00}},   // Y
   {90,90,8,8,{0xFE,0x06,0x0C,0x18,0x30,0x60,0xFE,0x00}},   // Z
   {91,91,8,8,{0x7C,0x60,0x60,0x60,0x60,0x60,0x7C,0x00}},   // [
   {92,92,8,8,{0x00,0x00,0x60,0x30,0x18,0x0C,0x06,0x00}},   // \
   {93,93,8,8,{0x7C,0x0C,0x0C,0x0C,0x0C,0x0C,0x7C,0x00}},   // ]
   {94,94,8,8,{0x18,0x3C,0x66,0x00,0x00,0x00,0x00,0x00}},   // ^
   {95,95,8,8,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF}},   // _
   {96,96,8,8,{0x30,0x18,0x0C,0x00,0x00,0x00,0x00,0x00}},   // `
   {97,97,8,8,{0x00,0x00,0x7C,0x06,0x7E,0xC6,0x7E,0x00}},   // a
   {98,98,8,8,{0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0xFC,0x00}},   // b
   {99,99,8,8,{0x00,0x00,0x7C,0xC6,0xC0,0xC6,0x7C,0x00}},   // c
   {100,100,8,8,{0x06,0x06,0x7E,0xC6,0xC6,0xC6,0x7E,0x00}},   // d
   {101,101,8,8,{0x00,0x00,0x7C,0xC6,0xFE,0xC0,0x7C,0x00}},   // e
   {102,102,8,8,{0x3C,0x66,0x60,0xF8,0x60,0x60,0x60,0x00}},   // f
   {103,103,8,8,{0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x7C}},   // g
   {104,104,8,8,{0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0xC6,0x00}},   // h
   {105,105,8,8,{0x18,0x00,0x38,0x18,0x18,0x18,0x3C,0x00}},   // i
   {106,106,8,8,{0x0C,0x00,0x1C,0x0C,0x0C,0x0C,0xCC,0x78}},   // j
   {107,107,8,8,{0xC0,0xC0,0xCC,0xD8,0xF0,0xD8,0xCC,0x00}},   // k
   {108,108,8,8,{0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00}},   // l
   {109,109,8,8,{0x00,0x00,0xEC,0xFE,0xD6,0xD6,0xD6,0x00}},   // m
   {110,110,8,8,{0x00,0x00,0xFC,0xC6,0xC6,0xC6,0xC6,0x00}},   // n
   {111,111,8,8,{0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C,0x00}},   // o
   {112,112,8,8,{0x00,0x00,0xFC,0xC6,0xC6,0xFC,0xC0,0xC0}},   // p
   {113,113,8,8,{0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x06}},   // q
   {114,114,8,8,{0x00,0x00,0xFC,0xC6,0xC0,0xC0,0xC0,0x00}},   // r
   {115,115,8,8,{0x00,0x00,0x7E,0xC0,0x7C,0x06,0xFC,0x00}},   // s
   {116,116,8,8,{0x60,0x60,0xF8,0x60,0x60,0x66,0x3C,0x00}},   // t
   {117,117,8,8,{0x00,0x00,0xC6,0xC6,0xC6,0xC6,0x7E,0x00}},   // u
   {118,118,8,8,{0x00,0x00,0xC6,0xC6,0xC6,0x6C,0x38,0x00}},   // v
   {119,119,8,8,{0x00,0x00,0xD6,0xD6,0xD6,0xFE,0x6C,0x00}},   // w
   {120,120,8,8,{0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6,0x00}},   // x
   {121,121,8,8,{0x00,0x00,0xC6,0xC6,0xC6,0x7E,0x06,0x7C}},   // y
   {122,122,8,8,{0x00,0x00,0xFE,0x0C,0x18,0x30,0xFE,0x00}},   // z
   {123,123,8,8,{0x1C,0x30,0x30,0x60,0x30,0x30,0x1C,0x00}},   // {
   {124,124,8,8,{0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00}},   // |
   {125,125,8,8,{0x70,0x18,0x18,0x0C,0x18,0x18,0x70,0x00}},   // }
   {126,126,8,8,{0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00}},   // ~
};

int stb_easy_font_print(float x, float y, char *text, unsigned char color[4], void *vertex_buffer, int vbuf_size)
{
   float start_x = x;
   float start_y = y;
   int v = 0;
   int max_v = vbuf_size / (sizeof(float) * 5 + sizeof(unsigned char) * 4);
   
   if (!color) color = (unsigned char *)"\xff\xff\xff\xff";
   
   while (*text && v < max_v) {
      if (*text >= 32 && *text < 127) {
         stb_easy_font_char *info = &stb_easy_font_charinfo[*text - 32];
         float x0 = x + info->c0;
         float y0 = y + info->c1;
         float x1 = x + info->c0 + info->w;
         float y1 = y + info->c1 + info->h;
         
         float *vb = (float *)vertex_buffer + v * 9;
         vb[0] = x0; vb[1] = y0; vb[2] = 0;
         vb[3] = 0; vb[4] = 0;
         vb[5] = color[0]/255.0f; vb[6] = color[1]/255.0f; vb[7] = color[2]/255.0f; vb[8] = color[3]/255.0f;
         
         vb[9] = x1; vb[10] = y0; vb[11] = 0;
         vb[12] = 1; vb[13] = 0;
         vb[14] = color[0]/255.0f; vb[15] = color[1]/255.0f; vb[16] = color[2]/255.0f; vb[17] = color[3]/255.0f;
         
         vb[18] = x1; vb[19] = y1; vb[20] = 0;
         vb[21] = 1; vb[22] = 1;
         vb[23] = color[0]/255.0f; vb[24] = color[1]/255.0f; vb[25] = color[2]/255.0f; vb[26] = color[3]/255.0f;
         
         vb[27] = x0; vb[28] = y1; vb[29] = 0;
         vb[30] = 0; vb[31] = 1;
         vb[32] = color[0]/255.0f; vb[33] = color[1]/255.0f; vb[34] = color[2]/255.0f; vb[35] = color[3]/255.0f;
         
         v += 4;
         x += info->w;
      } else if (*text == '\n') {
         x = start_x;
         y += 12;
      }
      ++text;
   }
   return v;
}

#endif
